# meta developer: @Femboy4k

import contextlib
import os
import platform
import sys
import time
from datetime import timedelta
import psutil
from telethon.tl.types import Message
from .. import loader, utils
#–∫—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Ç–æ—Ç –≥–µ–π—á–∏–∫

def bytes_to_megabytes(b: int) -> float:
    return round(b / 1024 / 1024, 1)

def bytes_to_gb(b: int) -> float:
    return round(b / 1024 / 1024 / 1024, 2)

def seconds_to_readable(seconds: int) -> str:
    return str(timedelta(seconds=seconds))

@loader.tds
class serverInfoMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Ä–≤–µ—Ä–∞"""

    strings = {"name": "–î–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞"}

    @loader.command()
    async def infoserv(self, message: Message):
        """–í—ã–≤–æ–¥–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        await utils.answer(message, "–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ...")

    strings = {
        "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
        "loading": "‚öôÔ∏è –ñ–¥–∏, —è –∑–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        "servinfo": (
            "‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:\n\n"
            "üìù –¶–ü–£: {cpu_cores} —è–¥—Ä–∞ @ {cpu_freq} –ì–ì—Ü, –Ω–∞–≥—Ä—É–∑–∫–∞: {cpu_load}%\n"
            "üëå –ü–∞–º—è—Ç—å: {ram_used} / {ram_total} –ú–ë ({ram_percent}%)\n"
            "üíæ –î–∏—Å–∫: {disk_used} / {disk_total} –ì–ë ({disk_percent}%)\n"
            "üñ• –Ø–¥—Ä–æ: {kernel}\n"
            "üíª –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch}\n"
            "‚ö† –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os}\n"
            "‚ùÑ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}\n"
            "üíª –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞: {fan_speed}\n"
            "üöÑ –ü–∏–Ω–≥: {ping} –º—Å\n"
            "üïò –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            "üë®‚Äçüíª –í–µ—Ä—Å–∏—è Python: {python}\n"
            "üì∫ –ü—Ä–æ—Ü–µ—Å—Å—ã: {processes}\n"
            "üåï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}"
        ),
    }

    @loader.command()
    async def serverinfo(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        await utils.answer(message, self.strings("loading"))

        info = {
            "cpu_cores": "n/a",
            "cpu_freq": "n/a",
            "cpu_load": "n/a",
            "ram_used": "n/a",
            "ram_total": "n/a",
            "ram_percent": "n/a",
            "disk_used": "n/a",
            "disk_total": "n/a",
            "disk_percent": "n/a",
            "kernel": "n/a",
            "arch": "n/a",
            "os": "n/a",
            "temperature": "n/a",
            "fan_speed": "n/a",
            "ping": "n/a",
            "uptime": "n/a",
            "python": "n/a",
            "processes": "n/a",
            "users": "n/a",
        }

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        with contextlib.suppress(Exception):
            info["cpu_cores"] = psutil.cpu_count(logical=True)

        with contextlib.suppress(Exception):
            cpu_freq = psutil.cpu_freq().current / 1000  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –ì–ì—Ü
            info["cpu_freq"] = round(cpu_freq, 2)

        with contextlib.suppress(Exception):
            info["cpu_load"] = psutil.cpu_percent()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        with contextlib.suppress(Exception):
            ram = psutil.virtual_memory()
            info["ram_used"] = bytes_to_megabytes(ram.used)
            info["ram_total"] = bytes_to_megabytes(ram.total)
            info["ram_percent"] = ram.percent

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
        with contextlib.suppress(Exception):
            disk = psutil.disk_usage("/")
            info["disk_used"] = bytes_to_gb(disk.used)
            info["disk_total"] = bytes_to_gb(disk.total)
            info["disk_percent"] = disk.percent

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–¥—Ä–µ –∏ –û–°
        with contextlib.suppress(Exception):
            info["kernel"] = platform.release()

        with contextlib.suppress(Exception):
            info["arch"] = platform.architecture()[0]

        with contextlib.suppress(Exception):
            system = os.popen("cat /etc/*release").read()
            b = system.find('PRETTY_NAME="') + 13
            info["os"] = system[b : system.find('"', b)]

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞
        with contextlib.suppress(Exception):
            temps = psutil.sensors_temperatures()
            if "coretemp" in temps:
                info["temperature"] = f"{temps['coretemp'][0].current}¬∞C"
            else:
                info["temperature"] = "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"

        with contextlib.suppress(Exception):
            fans = psutil.sensors_fans()
            if fans:
                fan_speeds = [f.current for f in fans.get(next(iter(fans)), []) if f.current]
                info["fan_speed"] = f"{fan_speeds[0]} RPM" if fan_speeds else "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"

        # –ü–∏–Ω–≥
        with contextlib.suppress(Exception):
            start = time.time()
            os.system("ping -c 1 8.8.8.8 > /dev/null 2>&1")
            info["ping"] = round((time.time() - start) * 1000, 2)

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        with contextlib.suppress(Exception):
            uptime_seconds = time.time() - psutil.boot_time()
            info["uptime"] = seconds_to_readable(int(uptime_seconds))

        # –í–µ—Ä—Å–∏—è Python
        with contextlib.suppress(Exception):
            info["python"] = (
                f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
            )

        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        with contextlib.suppress(Exception):
            info["processes"] = len(psutil.pids())

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        with contextlib.suppress(Exception):
            users = psutil.users()
            info["users"] = ", ".join({user.name for user in users})

        await utils.answer(message, self.strings("servinfo").format(**info))