from telethon import types
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji, ReactionCustomEmoji
from .. import loader, utils
import logging

logger = logging.getLogger(__name__)
__version__ = (1, 2, 0)


@loader.tds
class MeowReactMod(loader.Module):
    strings = {
        "name": "MeowReact",
        "enabled": "‚úÖ –†–µ–∞–∫—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "disabled": "üö´ –†–µ–∞–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "reaction_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è: {}",
        "premium_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ Premium —Ä–µ–∞–∫—Ü–∏—è –ø–æ ID: {}",
        "trigger_set": "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ: {}",
        "no_reaction": "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ ID –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "current_reaction",
            "üò∏",
            "–¢–µ–∫—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è (—ç–º–æ–¥–∑–∏ –∏–ª–∏ ID –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏)",
            
            "is_premium",
            False,
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏",
            
            "trigger_word",
            "",
            "–°–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"
        )

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.active_chats = self.get("active_chats", {})

    def save_active_chats(self):
        self.set("active_chats", self.active_chats)

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç–µ")
    async def toggle(self, message):
        chat_id = str(message.chat_id)
        if chat_id in self.active_chats:
            del self.active_chats[chat_id]
            status = False
        else:
            self.active_chats[chat_id] = True
            status = True
        self.save_active_chats()
        await utils.answer(message, self.strings["enabled"] if status else self.strings["disabled"])

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (—ç–º–æ–¥–∑–∏ –∏–ª–∏ ID –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏)")
    async def setr(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_reaction"])
            return
        is_premium = args.isdigit()
        self.config["current_reaction"] = args
        self.config["is_premium"] = is_premium
        await utils.answer(
            message,
            self.strings["premium_set"].format(args) if is_premium else self.strings["reaction_set"].format(args)
        )

    @loader.command(ru_doc="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ")
    async def settrigger(self, message):
        args = utils.get_args_raw(message)
        self.config["trigger_word"] = args
        await utils.answer(message, self.strings["trigger_set"].format(args or "–Ω–µ—Ç"))

    @loader.watcher()
    async def watcher(self, message):
        if not isinstance(message, types.Message):
            return
        chat_id = str(message.chat_id)
        if chat_id not in self.active_chats:
            return

        text = getattr(message, "text", "") or ""
        trigger = self.config.get("trigger_word", "").lower()
        if trigger and trigger not in text.lower():
            return

        try:
            if self.config["is_premium"]:
                doc_id = int(self.config["current_reaction"])
                reaction = ReactionCustomEmoji(document_id=doc_id)
            else:
                reaction = ReactionEmoji(emoticon=self.config["current_reaction"])
            
            await self._client(SendReactionRequest(
                peer=message.chat_id,
                msg_id=message.id,
                reaction=reaction
            ))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}")