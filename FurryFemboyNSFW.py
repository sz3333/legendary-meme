# meta developer: Femboy4k.t.me
from telethon import events
from .. import loader, utils
from telethon.tl.types import Message
import random
import logging
import asyncio
import sqlite3
import base64
import os
from telethon.errors import ChannelPrivateError, ChannelInvalidError, PeerIdInvalidError, RPCError

logger = logging.getLogger(__name__)

DB_PATH = "furry_cache.db"

@loader.tds
class FurryCacheMod(loader.Module):
    """–ù—è—à–Ω—ã–π NSFW Furry –º–æ–¥ —Å –∫—ç—à–µ–º, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ª–∞–ø–∫–∞–º–∏ üêæ"""

    strings = {
        "name": "Furry NSFW (Gay++)",
        "fetching": "–ú—è—É~ —Ç—è–Ω—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—Ä—Ç üêæ",
        "fetching_remote": "–ú—É—Ä—Ä~ –∑–∞–≥—Ä—É–∂–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞‚Ä¶ –ø–æ—Ç–µ—Ä–ø–∏ –∫–æ—Ç–µ–π–∫—É~",
        "no_media": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, –¥–∞–∂–µ —Ö–≤–æ—Å—Ç–∏–∫ –Ω–µ –≤–∏–¥–Ω–æ :(",
        "error": "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å üß®",
        "cleared": "–ö–µ—à –æ—á–∏—â–µ–Ω! –ß–∏—Å—Ç–æ –∫–∞–∫ –≤ –≤–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ —Ç–µ–±—è üõÅ",
        "info": "üì¶ –í –∫–µ—à–µ: <b>{}</b> –º–µ–¥–∏–∞\nüîÅ –ó–∞–ø—Ä–æ—Å–æ–≤: <b>{}</b>",
        "channel_error": "–í—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üòø –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π .furrset <–∫–∞–Ω–∞–ª>",
        "channel_set": "‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{}</b>",
        "no_cache": "–ö–µ—à –ø—É—Å—Ç! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ –º–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–æ–π .furrload"
    }

    def __init__(self):
        self._init_db()
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "channels",
                ["@FurryFemboysPlace", "fur_pub_sas", "gexfor20"],
                "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å–ø–∏—Å–æ–∫)",
                validator=loader.validators.Union(
                    loader.validators.Series(loader.validators.String()),
                    loader.validators.String()
                )
            ),
            loader.ConfigValue(
                "max_messages",
                2000,
                "–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
                validator=loader.validators.Integer(minimum=100, maximum=10000)
            )
        )

    def _init_db(self):
        self._conn = sqlite3.connect(DB_PATH)
        cursor = self._conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""CREATE TABLE IF NOT EXISTS media (
            id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            message_id INTEGER,
            UNIQUE(chat_id, message_id)
        )""")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            cursor.execute("SELECT channel_name FROM media LIMIT 1")
        except sqlite3.OperationalError:
            # –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            cursor.execute("ALTER TABLE media ADD COLUMN channel_name TEXT DEFAULT 'unknown'")
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ channel_name –≤ —Ç–∞–±–ª–∏—Ü—É media")
        
        cursor.execute("""CREATE TABLE IF NOT EXISTS stats (
            key TEXT PRIMARY KEY,
            value INTEGER
        )""")
        cursor.execute("""CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY,
            name TEXT UNIQUE,
            chat_id INTEGER,
            accessible INTEGER DEFAULT 1
        )""")
        self._conn.commit()

    def _increment_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO stats (key, value) VALUES (?, 0)", (key,))
        cursor.execute("UPDATE stats SET value = value + 1 WHERE key = ?", (key,))
        self._conn.commit()

    def _get_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("SELECT value FROM stats WHERE key = ?", (key,))
        res = cursor.fetchone()
        return res[0] if res else 0

    def _get_channels(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        channels = self.config["channels"]
        if isinstance(channels, str):
            channels = [c.strip() for c in channels.split(",")]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        fallback_channels = [
            "gexfor20",
            "@gexfor20", 
            "furryart",
            "@furryart",
            "furry_nsfw",
            "@furry_nsfw"
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–µ–∑ –¥—É–±–ª–µ–π
        all_channels = list(dict.fromkeys(channels + fallback_channels))
        return all_channels

    async def _test_channel_access(self, channel_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞"""
        try:
            channel = await self.client.get_entity(channel_name)
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages = await self.client.get_messages(channel, limit=1)
            return channel, True
        except Exception as e:
            logger.warning(f"–ö–∞–Ω–∞–ª {channel_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None, False

    async def _find_accessible_channels(self):
        """–ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        channels = self._get_channels()
        accessible = []
        
        for channel_name in channels:
            channel, is_accessible = await self._test_channel_access(channel_name)
            if is_accessible:
                accessible.append((channel_name, channel))
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω: {channel_name}")
            
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        return accessible

    async def _load_from_channel(self, channel_name, channel, max_messages):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        media_loaded = 0
        offset_id = 0
        limit = 100
        
        try:
            while media_loaded < max_messages:
                messages = await self.client.get_messages(
                    channel, 
                    limit=min(limit, max_messages - media_loaded),
                    offset_id=offset_id
                )
                
                if not messages:
                    break
                
                cursor = self._conn.cursor()
                for msg in messages:
                    if msg.media:
                        try:
                            cursor.execute(
                                "INSERT OR IGNORE INTO media (chat_id, message_id, channel_name) VALUES (?, ?, ?)",
                                (msg.chat_id, msg.id, channel_name)
                            )
                            media_loaded += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
                
                self._conn.commit()
                if messages:
                    offset_id = messages[-1].id
                
                await asyncio.sleep(0.2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {channel_name}: {e}")
        
        return media_loaded

    async def furrloadcmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–µ—à"""
        await utils.answer(message, "üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
        
        accessible_channels = await self._find_accessible_channels()
        
        if not accessible_channels:
            await utils.answer(message, self.strings("channel_error"))
            return
        
        await utils.answer(message, f"üì• –ó–∞–≥—Ä—É–∂–∞—é –∏–∑ {len(accessible_channels)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        total_loaded = 0
        max_per_channel = self.config["max_messages"] // len(accessible_channels)
        
        for channel_name, channel in accessible_channels:
            loaded = await self._load_from_channel(channel_name, channel, max_per_channel)
            total_loaded += loaded
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {channel_name}: {loaded} –º–µ–¥–∏–∞")
        
        await utils.answer(message, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤!")

    async def furrcmd(self, message: Message):
        """–î–∞—ë—Ç —Ç–µ–±–µ –ø–æ—Ä—Ü–∏—é –ø—É—à–∏—Å—Ç–æ–≥–æ –∫—Ä–∏–Ω–∂–∞ –∏–∑ –±–∞–∑—ã üê±‚Äçüë§"""
        try:
            await utils.answer(message, self.strings("fetching"))
            
            cursor = self._conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ channel_name
            try:
                cursor.execute("SELECT chat_id, message_id, channel_name FROM media ORDER BY RANDOM() LIMIT 1")
                row = cursor.fetchone()
                if row:
                    chat_id, msg_id, channel_name = row
                else:
                    chat_id, msg_id, channel_name = None, None, None
            except sqlite3.OperationalError:
                # –ö–æ–ª–æ–Ω–∫–∏ channel_name –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                cursor.execute("SELECT chat_id, message_id FROM media ORDER BY RANDOM() LIMIT 1")
                row = cursor.fetchone()
                if row:
                    chat_id, msg_id = row
                    channel_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                else:
                    chat_id, msg_id, channel_name = None, None, None
            
            if not chat_id:
                await utils.answer(message, self.strings("no_cache"))
                return
            
            self._increment_stat("used")
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                msg = await self.client.get_messages(chat_id, ids=msg_id)
                if msg and msg.media:
                    file = await self.client.download_media(msg.media)
                    if file:
                        caption = msg.message or ""
                        if channel_name and channel_name != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
                            caption = f"{caption}\n\n–ò–∑: {channel_name}" if caption else f"–ò–∑: {channel_name}"
                        
                        await self.client.send_file(
                            message.chat_id, 
                            file, 
                            caption=caption
                        )
                        try:
                            os.remove(file)
                        except:
                            pass
                    else:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                else:
                    raise Exception("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
                cursor.execute("DELETE FROM media WHERE chat_id = ? AND message_id = ?", (chat_id, msg_id))
                self._conn.commit()
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                await self.furrcmd(message)
                return

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ furrcmd: %s", e)
            await utils.answer(message, self.strings("error"))

    async def furrsetcmd(self, message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫: .furrset @channel"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .furrset @channel_name")
            return
        
        channel_name = args.strip()
        channel, is_accessible = await self._test_channel_access(channel_name)
        
        if is_accessible:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
            current_channels = self.config["channels"]
            if isinstance(current_channels, str):
                current_channels = [c.strip() for c in current_channels.split(",")]
            
            if channel_name not in current_channels:
                current_channels.append(channel_name)
                self.config["channels"] = current_channels
            
            await utils.answer(message, self.strings("channel_set").format(channel_name))
        else:
            await utils.answer(message, f"‚ùå –ö–∞–Ω–∞–ª {channel_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    async def furrinfocmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        cursor = self._conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM media")
        count = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ channel_name
        try:
            cursor.execute("SELECT channel_name, COUNT(*) FROM media WHERE channel_name IS NOT NULL GROUP BY channel_name")
            by_channel = cursor.fetchall()
        except sqlite3.OperationalError:
            # –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            by_channel = []
        
        uses = self._get_stat("used")
        
        info = self.strings("info").format(count, uses)
        if by_channel:
            info += "\n\nüìä –ü–æ –∫–∞–Ω–∞–ª–∞–º:"
            for channel, cnt in by_channel:
                info += f"\n‚Ä¢ {channel or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}: {cnt}"
        
        await utils.answer(message, info)

    async def furrclearcmd(self, message: Message):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à"""
        cursor = self._conn.cursor()
        cursor.execute("DELETE FROM media")
        cursor.execute("DELETE FROM stats")
        self._conn.commit()
        await utils.answer(message, self.strings("cleared"))
