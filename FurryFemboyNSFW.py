# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
# If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/

# meta developer: Femboy4k.t.me
from telethon import events
from .. import loader, utils
from telethon.tl.types import Message
import random
import logging
import asyncio
import sqlite3
import os
import aiohttp

logger = logging.getLogger(__name__)
DB_PATH = "furry_cache.db"

@loader.tds
class FurryCacheMod(loader.Module):
    """–ù—è—à–Ω—ã–π NSFW Furry –º–æ–¥ —Å –∫—ç—à–µ–º üêæ + –∞—Ä—Ç—ã e621"""

    strings = {
        "name": "Furry NSFW (Gay++)",
        "fetching": "–ú—è—É~ —Ç—è–Ω—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∞—Ä—Ç üêæ",
        "fetching_remote": "–ú—É—Ä—Ä~ –∑–∞–≥—Ä—É–∂–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞‚Ä¶ –ø–æ—Ç–µ—Ä–ø–∏ –∫–æ—Ç–µ–π–∫—É~",
        "no_media": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, –¥–∞–∂–µ —Ö–≤–æ—Å—Ç–∏–∫ –Ω–µ –≤–∏–¥–Ω–æ :(",
        "no_cache": "–ö–µ—à –ø—É—Å—Ç! –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ –º–µ–¥–∏–∞ –∫–æ–º–∞–Ω–¥–æ–π .furrload",
        "error": "–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ–ª–æ–º–∞–ª–æ—Å—å üß®",
        "cleared": "–ö–µ—à –æ—á–∏—â–µ–Ω! –ß–∏—Å—Ç–æ –∫–∞–∫ –≤ –≤–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ —Ç–µ–±—è üõÅ",
        "info": "üì¶ –í –∫–µ—à–µ: <b>{}</b> –º–µ–¥–∏–∞\nüîÅ –ó–∞–ø—Ä–æ—Å–æ–≤: <b>{}</b>",
        "channel_error": "–í—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã üòø –ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π .furrset <–∫–∞–Ω–∞–ª>",
        "channel_set": "‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{}</b>",
    }

    def __init__(self):
        self._init_db()
        self.running = False
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "channels",
                ["@FurryFemboysPlace", "fur_pub_sas", "gexfor20"],
                "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
            ),
            loader.ConfigValue(
                "max_messages",
                2000,
                "–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
            )
        )

    # ==================== FurryCache ====================
    def _init_db(self):
        self._conn = sqlite3.connect(DB_PATH)
        cursor = self._conn.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS media (
            id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            message_id INTEGER,
            UNIQUE(chat_id, message_id)
        )""")
        try:
            cursor.execute("SELECT channel_name FROM media LIMIT 1")
        except sqlite3.OperationalError:
            cursor.execute("ALTER TABLE media ADD COLUMN channel_name TEXT DEFAULT 'unknown'")
        cursor.execute("""CREATE TABLE IF NOT EXISTS stats (
            key TEXT PRIMARY KEY,
            value INTEGER
        )""")
        cursor.execute("""CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY,
            name TEXT UNIQUE,
            chat_id INTEGER,
            accessible INTEGER DEFAULT 1
        )""")
        self._conn.commit()

    def _increment_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO stats (key, value) VALUES (?, 0)", (key,))
        cursor.execute("UPDATE stats SET value = value + 1 WHERE key = ?", (key,))
        self._conn.commit()

    def _get_stat(self, key):
        cursor = self._conn.cursor()
        cursor.execute("SELECT value FROM stats WHERE key = ?", (key,))
        res = cursor.fetchone()
        return res[0] if res else 0

    async def furrloadcmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–µ—à"""
        await utils.answer(message, "üîç –ò—â—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã‚Ä¶")
        channels = self.config["channels"]
        if isinstance(channels, str):
            channels = [c.strip() for c in channels.split(",")]
        total_loaded = 0
        for ch in channels:
            try:
                msgs = await message.client.get_messages(ch, limit=self.config["max_messages"])
                cursor = self._conn.cursor()
                for msg in msgs:
                    if msg.media:
                        cursor.execute("INSERT OR IGNORE INTO media (chat_id, message_id, channel_name) VALUES (?, ?, ?)",
                                       (msg.chat_id, msg.id, ch))
                        total_loaded += 1
                self._conn.commit()
            except Exception:
                continue
            await asyncio.sleep(0.3)
        await utils.answer(message, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤!")

    async def furrcmd(self, message: Message):
        """–î–∞—ë—Ç –ø–æ—Ä—Ü–∏—é –ø—É—à–∏—Å—Ç–æ–≥–æ –∫—Ä–∏–Ω–∂–∞ –∏–∑ –±–∞–∑—ã üê±‚Äçüë§"""
        cursor = self._conn.cursor()
        try:
            cursor.execute("SELECT chat_id, message_id, channel_name FROM media ORDER BY RANDOM() LIMIT 1")
            row = cursor.fetchone()
            if row:
                chat_id, msg_id, channel_name = row
                msg = await self.client.get_messages(chat_id, ids=msg_id)
                if msg and msg.media:
                    file = await self.client.download_media(msg.media)
                    await self.client.send_file(message.chat_id, file)
                    try: os.remove(file)
                    except: pass
                else:
                    await utils.answer(message, self.strings("no_cache"))
            else:
                await utils.answer(message, self.strings("no_cache"))
        except sqlite3.OperationalError:
            cursor.execute("SELECT chat_id, message_id FROM media ORDER BY RANDOM() LIMIT 1")
            row = cursor.fetchone()
            if row:
                chat_id, msg_id = row
                msg = await self.client.get_messages(chat_id, ids=msg_id)
                if msg and msg.media:
                    file = await self.client.download_media(msg.media)
                    await self.client.send_file(message.chat_id, file)
                    try: os.remove(file)
                    except: pass
                else:
                    await utils.answer(message, self.strings("no_cache"))
            else:
                await utils.answer(message, self.strings("no_cache"))

    async def furrsetcmd(self, message: Message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫: .furrset @channel"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .furrset @channel_name")
            return
        ch = args.strip()
        try:
            await message.client.get_entity(ch)
            channels = self.config["channels"]
            if isinstance(channels, str):
                channels = [c.strip() for c in channels.split(",")]
            if ch not in channels:
                channels.append(ch)
                self.config["channels"] = channels
            await utils.answer(message, self.strings("channel_set").format(ch))
        except Exception:
            await utils.answer(message, f"‚ùå –ö–∞–Ω–∞–ª {ch} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    async def furrinfocmd(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        cursor = self._conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM media")
        count = cursor.fetchone()[0]
        uses = self._get_stat("used")
        await utils.answer(message, self.strings("info").format(count, uses))

    async def furrclearcmd(self, message: Message):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫–µ—à"""
        cursor = self._conn.cursor()
        cursor.execute("DELETE FROM media")
        cursor.execute("DELETE FROM stats")
        self._conn.commit()
        await utils.answer(message, self.strings("cleared"))

    # ==================== e621 ====================
    async def e6cmd(self, message):
        """.e6 —Ç–µ–≥;—Ç–µ–≥;—Ç–µ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        args = utils.get_args_raw(message).split()
        if len(args) < 2:
            await utils.answer(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `.e6 femboy;catboy 5`")
            return
        tags = args[0].split(";")
        try:
            count = int(args[1])
        except ValueError:
            await utils.answer(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        self.running = True
        await utils.answer(message, f"üß¶ –û—Ç–ø—Ä–∞–≤–ª—è—é {count} –∞—Ä—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏: {', '.join(tags)}")
        asyncio.create_task(self._send_e6(message, tags, count))

    async def _send_e6(self, message, tags, count):
        headers = {"User-Agent": "HikkaBot/1.0 by Lidik"}
        sent = 0
        tag_query = "+".join(tags)
        async with aiohttp.ClientSession() as session:
            while self.running and sent < count:
                url = f"https://e621.net/posts.json?tags={tag_query}+order:random&limit=1"
                try:
                    async with session.get(url, headers=headers) as resp:
                        if resp.status != 200:
                            await asyncio.sleep(10)
                            continue
                        data = await resp.json()
                        posts = data.get("posts", [])
                        for post in posts:
                            file_url = post.get("file", {}).get("url")
                            if not file_url:
                                continue
                            try:
                                await message.client.send_file(
                                    message.chat_id,
                                    file_url,
                                    caption=f"üé® –¢–µ–≥–∏: {', '.join(tags)}"
                                )
                                sent += 1
                            except Exception:
                                continue
                            await asyncio.sleep(random.randint(5, 10))
                except Exception:
                    await asyncio.sleep(5)
        await message.respond("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def stop_e6cmd(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å e621"""
        self.running = False
        await utils.answer(message, "üõë e621 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")